// Generated by CoffeeScript 1.8.0
(function() {
  var app, express, io, port, posts, server, user_ids, users,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  port = process.env.port || 3001;

  server.listen(port, function() {
    return console.log("Server listening at port %d", port);
  });

  app.use(express["static"]("" + __dirname + "/public"));

  posts = {};

  users = {};

  user_ids = [];

  io.on('connection', function(socket) {
    console.log('user connected');
    socket.on('add user', function(data) {
      console.log(data);
      socket.user = data.user;
      users[socket.user.id] = socket.user;
      user_ids.push(socket.user.id);
      console.log(user_ids);
      return console.log(users);
    });
    socket.on('subscribe', function(data) {
      return socket.join(data.room);
    });
    socket.on('editing', function(data) {
      console.log(data);
      console.log("" + socket.user.name + " is editing " + data.postId);
      socket.join(data.post_id);
      if (posts[data.post_id] == null) {
        posts[data.post_id] = [];
      }
      posts[data.post_id].push(socket.user);
      console.log(posts[data.post_id]);
      return socket["in"](data.post_id).emit('editing', {
        post: data.post_id,
        user: socket.user
      });
    });
    socket.on('stop editing', function(data) {
      console.log("" + socket.user.name + " is no longer editing " + data.post_id);
      if (posts[data.post_id] == null) {
        posts[data.post_id] = [];
      }
      posts[data.post_id].splice(posts[data.post_id].indexOf(socket.user), 1);
      console.log(posts[data.post_id]);
      console.log('emitting left event');
      return socket.to(data.post_id).emit('left', {
        post: data.post_id,
        user: socket.user
      });
    });
    return socket.on('disconnect', function(data) {
      var _ref;
      if (socket.user != null) {
        console.log("user " + socket.user.id + " disconnected");
        user_ids.splice(user_ids.indexOf(socket.user.id), 1);
        console.log(user_ids);
        if (_ref = socket.user.id, __indexOf.call(user_ids, _ref) < 0) {
          delete users[socket.user.id];
        }
        delete posts[socket.user];
      }
      console.log(users);
      return console.log(posts);
    });
  });

}).call(this);
